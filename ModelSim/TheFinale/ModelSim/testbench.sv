`timescale 1ns / 1ps
// `define PRETRAINED

module testbench ( );

	parameter CLOCK_PERIOD = 10;
    parameter SCLK = 15;

	// top Test
	logic 				reset;
	logic               CLOCK_50;
    logic               serialClock;
    logic               serialData;
    logic   [6:0]       HEX0;
    logic   [1:0]       KEY;
    logic   [15:0]      ARDUINO_IO;


    logic   [784*16-1:0]    data;

	initial begin
        CLOCK_50 <= 1'b0;
        serialClock <= 1'b0;
	end // initial
	always @ (*)
	begin : Clock_Generator
		#((CLOCK_PERIOD) / 2) CLOCK_50 <= ~CLOCK_50;
	end
    always @ (*)
	begin : Clock_Generator_2
		#((SCLK) / 2) serialClock <= ~serialClock;
	end

    integer i;
	
	initial begin
        data = 'h
        reset <= 1'b0;
        #10
        reset <= 1'b1;
		#10 
		reset <= 1'b0;
		#10
		for (i = 0; i < 784 * 16; i = i + 1) begin
            serialData <= data[i];
            #15;
        end
	end // initial

    top U1 (
        .KEY({~reset,1'b0}),
        .CLOCK_50(CLOCK_50),
        .HEX0(HEX0),
        .ARDUINO_IO({14'b0, serialData, serialClock})
    ); 

endmodule
